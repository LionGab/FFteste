const moment = require('moment');

class HyperPersonalizer {
    constructor() {
        this.templates = {
            urgente_financeiro: [
                {
                    texto: `Oi {nome}! üòä

Tudo bem? Vi que voc√™ era {plano} e ficou com a gente por {tempo}... sentimos sua falta aqui na FullForce!

Sei que √†s vezes o or√ßamento aperta, ent√£o trouxe uma oportunidade ESPECIAL pra voc√™:

üî• PLANO ANUAL R$ 119,00
‚Ä¢ Economia de R$ 1.068 no ano
‚Ä¢ Acesso ilimitado todos os dias
‚Ä¢ Todas as aulas inclusas

Essa oferta √© s√≥ at√© AMANH√É e exclusiva pra voc√™ que j√° fez parte da fam√≠lia FullForce!

Bora voltar? üí™`,
                    cta: 'Quero voltar!',
                    urgencia: '48h'
                },
                {
                    texto: `{nome}, passando aqui rapidinho! üëã

{tempo_academia} de treino juntos n√£o podem ser esquecidos, n√©?

Tenho uma not√≠cia: liberamos uma condi√ß√£o ESPECIAL de retorno s√≥ pra ex-alunos do plano {plano}:

üí∞ R$ 119 NO ANO INTEIRO
(Isso d√° menos de R$ 10/m√™s!)

Literalmente o pre√ßo de 2 lanches... mas com resultado pra vida toda!

V√°lido s√≥ hoje e amanh√£. Posso separar sua vaga?`,
                    cta: 'Sim, quero!',
                    urgencia: '48h'
                },
                {
                    texto: `Fala {nome}! Tudo certo?

Olha, sei que quando voc√™ saiu era quest√£o de {motivo_saida}... mas trouxe algo que vai te interessar:

üéØ VOLTA CAMPE√ÉO - R$ 119/ANO
‚úÖ Mesmos benef√≠cios do {plano}
‚úÖ Economia brutal de 89%
‚úÖ Zero burocracia pra voltar

S√£o s√≥ {vagas} vagas nessa condi√ß√£o. Garante a sua?`,
                    cta: 'Quero garantir',
                    urgencia: '24h'
                }
            ],

            flexibilidade_horarios: [
                {
                    texto: `Oi {nome}! Como t√° a rotina?

Lembro que voc√™ comentou sobre {motivo_saida}... ent√£o vim com uma solu√ß√£o:

‚è∞ NOVOS HOR√ÅRIOS FLEX√çVEIS
‚Ä¢ Aberto 5h √†s 23h (seg-sex)
‚Ä¢ Finais de semana 7h √†s 13h
‚Ä¢ Treino r√°pido 30min OK!

B√îNUS: Primeira semana GR√ÅTIS pra voc√™ testar sem compromisso!

{tempo_academia} treinando j√° mostraram que voc√™ tem disciplina... agora s√≥ falta o timing certo!

Que tal?`,
                    cta: 'Quero testar',
                    urgencia: '72h'
                },
                {
                    texto: `{nome}! üëä

Saudades de te ver por aqui... {tempo} foi pouco! üòÖ

Mudamos bastante coisa desde que voc√™ saiu:
üìÖ Hor√°rios super flex√≠veis
‚ö° Treinos expressos 30min
üèãÔ∏è Equipamentos novos

E pra comemorar seu retorno: *SEMANA GR√ÅTIS*

Sem pegadinha, sem matr√≠cula. S√≥ testar e decidir!

Amanh√£ t√° bom pra voc√™?`,
                    cta: 'Sim, amanh√£!',
                    urgencia: '48h'
                }
            ],

            reconquista_vip: [
                {
                    texto: `{nome}, meu querido(a)! üíô

{tempo_academia} com a gente te transformaram em fam√≠lia FullForce!

Preparamos algo EXCLUSIVO pra voc√™:

üëë VIP RETORNO
‚Ä¢ R$ 119 anual (ex-{plano})
‚Ä¢ Prioridade reagendamento
‚Ä¢ Kit boas-vindas incluso
‚Ä¢ Avalia√ß√£o f√≠sica gr√°tis

Voc√™ faz parte dos TOP 10% de alunos fi√©is... por isso essa condi√ß√£o especial!

Aceita voltar pra casa?`,
                    cta: 'Aceito! ‚ù§Ô∏è',
                    urgencia: '72h'
                },
                {
                    texto: `Oi {nome}! Saudades daqui ü•∫

Olha s√≥: {tempo} treinando com consist√™ncia merece reconhecimento!

üèÜ OFERTA CAMPE√ÉO (s√≥ pra voc√™)
‚úì Plano Anual R$ 119
‚úì Personal gratuito no 1¬∫ m√™s
‚úì Amigo treina gr√°tis por 1 semana

Essa √© nossa forma de dizer: *volta logo!*

Topas?`,
                    cta: 'Topo sim!',
                    urgencia: '48h'
                }
            ],

            retorno_padrao: [
                {
                    texto: `Oi {nome}, tudo bem?

Faz um tempo que n√£o te vejo por aqui... sentimos sua falta! üí™

Que tal dar uma passada pra conhecer as novidades?

üéÅ PRESENTE PRA VOC√ä:
‚Ä¢ Avalia√ß√£o f√≠sica completa GR√ÅTIS
‚Ä¢ Aula experimental sem custo
‚Ä¢ Plano especial de retorno

Nada de compromisso, s√≥ vem conhecer!

Aceita?`,
                    cta: 'Aceito!',
                    urgencia: '1 semana'
                },
                {
                    texto: `{nome}! üëã

A FullForce n√£o √© a mesma sem voc√™...

Bora marcar um papo sem compromisso? Quero te mostrar as mudan√ßas e ver se faz sentido voc√™ voltar!

üéØ No seu tempo, sem press√£o
üéÅ Avalia√ß√£o gr√°tis de boas-vindas
üí∞ Condi√ß√µes especiais de retorno

Quando voc√™ pode?`,
                    cta: 'Vamos marcar',
                    urgencia: '1 semana'
                }
            ]
        };

        this.templateRotation = {}; // Controla rota√ß√£o de templates
    }

    /**
     * Gera mensagem personalizada para o aluno
     */
    gerarMensagem(aluno) {
        // Selecionar template baseado na recomenda√ß√£o do scoring
        const templateTipo = aluno.scoring?.recomendacao?.template || 'retorno_padrao';
        const templates = this.templates[templateTipo] || this.templates.retorno_padrao;

        // Rotacionar templates para evitar repeti√ß√£o
        const templateIndex = this.getNextTemplateIndex(aluno.telefone, templates.length);
        const template = templates[templateIndex];

        // Substituir vari√°veis
        const mensagem = this.substituirVariaveis(template.texto, aluno);

        return {
            mensagem,
            template: templateTipo,
            templateIndex,
            cta: template.cta,
            urgencia: template.urgencia,
            metadados: {
                scoreTotal: aluno.scoring?.scoreTotal,
                prioridade: aluno.scoring?.prioridade,
                recomendacao: aluno.scoring?.recomendacao
            }
        };
    }

    /**
     * Substitui vari√°veis no template
     */
    substituirVariaveis(texto, aluno) {
        let mensagem = texto;

        // Nome
        const primeiroNome = (aluno.nome || 'amigo(a)').split(' ')[0];
        mensagem = mensagem.replace(/{nome}/g, primeiroNome);

        // Plano anterior
        const plano = aluno.planoAnterior || 'nosso plano';
        mensagem = mensagem.replace(/{plano}/g, plano);

        // Tempo de perman√™ncia (formato amig√°vel)
        const tempoPermanencia = this.formatarTempoPermanencia(aluno.dataInicio, aluno.dataSaida);
        mensagem = mensagem.replace(/{tempo_academia}/g, tempoPermanencia);
        mensagem = mensagem.replace(/{tempo}/g, tempoPermanencia);

        // Motivo de sa√≠da (tratado)
        const motivoTratado = this.tratarMotivoSaida(aluno.motivoSaida);
        mensagem = mensagem.replace(/{motivo_saida}/g, motivoTratado);

        // Vagas dispon√≠veis (n√∫mero aleat√≥rio entre 3-8 para urg√™ncia)
        const vagas = Math.floor(Math.random() * 6) + 3;
        mensagem = mensagem.replace(/{vagas}/g, vagas);

        // Dias inativo
        const diasInativo = aluno.dataUltimaAtividade || aluno.dataSaida
            ? moment().diff(moment(aluno.dataUltimaAtividade || aluno.dataSaida), 'days')
            : 0;
        mensagem = mensagem.replace(/{dias_inativo}/g, diasInativo);

        return mensagem.trim();
    }

    /**
     * Formata tempo de perman√™ncia de forma amig√°vel
     */
    formatarTempoPermanencia(dataInicio, dataSaida) {
        if (!dataInicio || !dataSaida) return 'o tempo que voc√™ treinou';

        const meses = moment(dataSaida).diff(moment(dataInicio), 'months');

        if (meses >= 24) return `${Math.floor(meses / 12)} anos`;
        if (meses >= 12) return '1 ano';
        if (meses >= 6) return `${meses} meses`;
        if (meses >= 2) return `${meses} meses`;
        return 'esse tempo';
    }

    /**
     * Trata motivo de sa√≠da para texto amig√°vel
     */
    tratarMotivoSaida(motivo) {
        if (!motivo) return 'ajuste na rotina';

        const motivoLower = motivo.toLowerCase();

        if (motivoLower.includes('financeiro') || motivoLower.includes('dinheiro')) {
            return 'ajuste no or√ßamento';
        }
        if (motivoLower.includes('tempo') || motivoLower.includes('horario')) {
            return 'falta de tempo';
        }
        if (motivoLower.includes('saude') || motivoLower.includes('lesao')) {
            return 'quest√£o de sa√∫de';
        }
        if (motivoLower.includes('viagem') || motivoLower.includes('mudanca')) {
            return 'mudan√ßa de cidade';
        }

        return 'motivo pessoal';
    }

    /**
     * Controla rota√ß√£o de templates
     */
    getNextTemplateIndex(telefone, totalTemplates) {
        if (!this.templateRotation[telefone]) {
            this.templateRotation[telefone] = 0;
        }

        const index = this.templateRotation[telefone] % totalTemplates;
        this.templateRotation[telefone]++;

        return index;
    }

    /**
     * Gera preview de mensagem para aprova√ß√£o
     */
    gerarPreview(aluno) {
        const msg = this.gerarMensagem(aluno);

        return {
            telefone: aluno.telefone,
            nome: aluno.nome,
            score: aluno.scoring?.scoreTotal,
            prioridade: aluno.scoring?.prioridade,
            mensagemPreview: msg.mensagem.substring(0, 150) + '...',
            mensagemCompleta: msg.mensagem,
            template: msg.template,
            cta: msg.cta,
            urgencia: msg.urgencia,
            caracteristicas: {
                tamanho: msg.mensagem.length,
                linhas: msg.mensagem.split('\n').length,
                emojis: (msg.mensagem.match(/[\u{1F300}-\u{1F9FF}]/gu) || []).length,
                temUrgencia: msg.urgencia !== '1 semana'
            }
        };
    }

    /**
     * Gera lote de mensagens para aprova√ß√£o
     */
    gerarLoteParaAprovacao(lote) {
        return lote.map(aluno => this.gerarPreview(aluno));
    }

    /**
     * Estat√≠sticas de templates usados
     */
    getEstatisticasTemplates() {
        const distribuicao = {};

        Object.keys(this.templateRotation).forEach(telefone => {
            const count = this.templateRotation[telefone];
            const tipo = count % 3; // Assumindo 3 templates por tipo

            distribuicao[tipo] = (distribuicao[tipo] || 0) + 1;
        });

        return {
            totalEnviados: Object.keys(this.templateRotation).length,
            distribuicaoPorTemplate: distribuicao,
            templatesDisponiveis: Object.keys(this.templates).length
        };
    }

    /**
     * Adiciona novo template personalizado
     */
    adicionarTemplate(tipo, template) {
        if (!this.templates[tipo]) {
            this.templates[tipo] = [];
        }

        this.templates[tipo].push({
            texto: template.texto,
            cta: template.cta || 'Responder',
            urgencia: template.urgencia || '1 semana'
        });

        console.log(`‚úÖ Template '${tipo}' adicionado com sucesso`);
    }

    /**
     * Testa template com aluno fict√≠cio
     */
    testarTemplate(tipo, alunoTeste = null) {
        const aluno = alunoTeste || {
            nome: 'Jo√£o Silva',
            telefone: '66999999999',
            planoAnterior: 'Prata',
            dataInicio: '2023-01-15',
            dataSaida: '2024-11-01',
            dataUltimaAtividade: '2024-11-01',
            motivoSaida: 'financeiro',
            idade: 32,
            scoring: {
                scoreTotal: 85,
                prioridade: 'MUITO_ALTA',
                recomendacao: {
                    template: tipo
                }
            }
        };

        return this.gerarPreview(aluno);
    }
}

module.exports = HyperPersonalizer;
