version: '3.8'

services:
  # MCP Sequential Thinking Server
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-sequential-thinking
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/whatsapp_automation
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app/src
    volumes:
      - ./data:/data
      - ./logs:/var/log
      - ./.env:/app/.env
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - whatsapp-automation
    healthcheck:
      test: ["CMD", "python", "-c", "import asyncio; import aiohttp; asyncio.run(aiohttp.request('GET', 'http://localhost:8000/health'))"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres-whatsapp
    restart: unless-stopped
    environment:
      POSTGRES_DB: whatsapp_automation
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - whatsapp-automation
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d whatsapp_automation"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis-whatsapp
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redispassword
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - whatsapp-automation
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # N8N Automation Platform
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-automation
    restart: unless-stopped
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=password
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=password
      - WEBHOOK_URL=http://localhost:5678
      - GENERIC_TIMEZONE=America/Sao_Paulo
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n-workflows:/home/node/workflows
    ports:
      - "5678:5678"
    depends_on:
      - postgres
    networks:
      - whatsapp-automation

  # WhatsApp Business API (WAHA)
  waha:
    image: devlikeapro/waha:latest
    container_name: waha-whatsapp
    restart: unless-stopped
    environment:
      - WHATSAPP_API_PORT=3000
      - WHATSAPP_API_HOSTNAME=0.0.0.0
      - WHATSAPP_START_SESSION=default
    volumes:
      - waha_data:/app/sessions
    ports:
      - "3000:3000"
    networks:
      - whatsapp-automation
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-monitoring
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - whatsapp-automation

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-dashboard
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - whatsapp-automation

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - mcp-server
      - n8n
      - grafana
    networks:
      - whatsapp-automation

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  n8n_data:
    driver: local
  waha_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  whatsapp-automation:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16