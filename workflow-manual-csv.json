{
  "name": "🚀 FullForce Academia - CSV Manual (SEM API)",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "mode": "webhook",
        "webhookId": "fullforce-650-manual"
      },
      "id": "trigger-manual",
      "name": "🎯 Trigger Manual CSV",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "jsCode": "// CARREGAR DADOS CSV LOCAIS - SEM API\nconst fs = require('fs');\nconst path = require('path');\n\n// Caminhos dos arquivos CSV exportados manualmente\nconst csvPaths = {\n  todosAlunos: '/home/node/.n8n/csv-data/todos_alunos.csv',\n  alunosAtivos: '/home/node/.n8n/csv-data/alunos_ativos.csv',\n  alunosInativos: '/home/node/.n8n/csv-data/alunos_inativos.csv'\n};\n\nfunction parseCSV(csvContent) {\n  const lines = csvContent.split('\\n').filter(line => line.trim());\n  const headers = lines[0].split(',').map(h => h.trim().replace(/\"/g, ''));\n  \n  return lines.slice(1).map(line => {\n    const values = line.split(',').map(v => v.trim().replace(/\"/g, ''));\n    const obj = {};\n    headers.forEach((header, index) => {\n      obj[header] = values[index] || '';\n    });\n    return obj;\n  });\n}\n\nlet dadosCarregados = {\n  todos: [],\n  ativos: [],\n  inativos: [],\n  status: 'sucesso',\n  timestamp: new Date().toISOString()\n};\n\ntry {\n  // Verificar se arquivos existem\n  Object.keys(csvPaths).forEach(key => {\n    const csvPath = csvPaths[key];\n    if (fs.existsSync(csvPath)) {\n      const csvContent = fs.readFileSync(csvPath, 'utf8');\n      const dados = parseCSV(csvContent);\n      \n      if (key === 'todosAlunos') dadosCarregados.todos = dados;\n      if (key === 'alunosAtivos') dadosCarregados.ativos = dados;\n      if (key === 'alunosInativos') dadosCarregados.inativos = dados;\n      \n      console.log(`✅ Carregado ${key}: ${dados.length} registros`);\n    } else {\n      console.log(`⚠️ Arquivo não encontrado: ${csvPath}`);\n    }\n  });\n  \n  // Se não há arquivo específico de inativos, calcular\n  if (dadosCarregados.inativos.length === 0 && dadosCarregados.todos.length > 0) {\n    const emailsAtivos = new Set(dadosCarregados.ativos.map(a => a.Email || a['E-mail']));\n    dadosCarregados.inativos = dadosCarregados.todos.filter(aluno => \n      !emailsAtivos.has(aluno.Email || aluno['E-mail'])\n    );\n    console.log(`📊 Calculado inativos: ${dadosCarregados.inativos.length}`);\n  }\n  \n} catch (error) {\n  dadosCarregados.status = 'erro';\n  dadosCarregados.erro = error.message;\n  console.error('❌ Erro ao carregar CSV:', error);\n}\n\nreturn [{\n  json: {\n    ...dadosCarregados,\n    resumo: {\n      totalTodos: dadosCarregados.todos.length,\n      totalAtivos: dadosCarregados.ativos.length,\n      totalInativos: dadosCarregados.inativos.length,\n      prontoParaCampanha: dadosCarregados.inativos.length > 0\n    }\n  }\n}];"
      },
      "id": "load-csv-data",
      "name": "📂 Carregar CSV Local",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [420, 300]
    },
    {
      "parameters": {
        "jsCode": "// SEGMENTAÇÃO 610 INATIVOS - SEM API\nconst data = $json;\nconst inativos = data.inativos || [];\n\nif (inativos.length === 0) {\n  return [{ json: { erro: 'Nenhum aluno inativo encontrado nos dados CSV' } }];\n}\n\nconst today = new Date();\nconst avgMonthlyValue = 129.90;\n\n// Taxas de conversão por grupo\nconst conversionRates = {\n  criticos: 0.15,    // Fev-Mar: 15%\n  moderados: 0.25,   // Abr-Jun: 25% \n  recentes: 0.35     // Jul-Set: 35%\n};\n\nconst grupos = {\n  criticos: [],\n  moderados: [],\n  recentes: [],\n  outros: []\n};\n\ninativos.forEach((aluno, index) => {\n  const nome = aluno['Nome-Completo'] || aluno.Nome || `Aluno_${index}`;\n  const telefone = (aluno['Telefone-1'] || aluno.Telefone || '').replace(/\\D/g, '');\n  const email = aluno['E-mail'] || aluno.Email || '';\n  const dataCadastro = aluno['Data-de-Cadastro'] || aluno['Data_Cadastro'] || '';\n  \n  // Validar telefone\n  if (!telefone || telefone.length < 10) {\n    grupos.outros.push({ nome, telefone, motivo: 'Telefone inválido' });\n    return;\n  }\n  \n  // Determinar grupo baseado na data de cadastro\n  let grupo = 'outros';\n  if (dataCadastro) {\n    const [day, month, year] = dataCadastro.split(/[\\s\\/\\-]/)[0].split('/');\n    const cadastroDate = new Date(`${year}-${month}-${day}`);\n    const mes = cadastroDate.getMonth() + 1;\n    const ano = cadastroDate.getFullYear();\n    \n    if (ano === 2025) {\n      if (mes >= 2 && mes <= 3) grupo = 'criticos';      // Fev-Mar\n      else if (mes >= 4 && mes <= 6) grupo = 'moderados'; // Abr-Jun  \n      else if (mes >= 7 && mes <= 9) grupo = 'recentes';  // Jul-Set\n    }\n  }\n  \n  const alunoData = {\n    nome: nome,\n    primeiroNome: nome.split(' ')[0],\n    telefone: telefone.startsWith('55') ? telefone : `55${telefone}`,\n    email: email,\n    dataCadastro: dataCadastro,\n    grupo: grupo,\n    valorPlano: avgMonthlyValue,\n    index: index + 1\n  };\n  \n  // Adicionar configurações específicas por grupo\n  if (grupo === 'criticos') {\n    grupos.criticos.push({\n      ...alunoData,\n      urgencia: 'ALTA',\n      msgsPerDay: 83,\n      desconto: 50,\n      template: 'critica_50off',\n      conversaoEsperada: conversionRates.criticos\n    });\n  } else if (grupo === 'moderados') {\n    grupos.moderados.push({\n      ...alunoData,\n      urgencia: 'MEDIA',\n      msgsPerDay: 67,\n      desconto: 30,\n      template: 'moderada_30off',\n      conversaoEsperada: conversionRates.moderados\n    });\n  } else if (grupo === 'recentes') {\n    grupos.recentes.push({\n      ...alunoData,\n      urgencia: 'BAIXA',\n      msgsPerDay: 54,\n      desconto: 0,\n      template: 'recente_aula_gratis',\n      conversaoEsperada: conversionRates.recentes\n    });\n  } else {\n    grupos.outros.push(alunoData);\n  }\n});\n\n// Calcular métricas\nconst expectedConversions = {\n  criticos: Math.round(grupos.criticos.length * conversionRates.criticos),\n  moderados: Math.round(grupos.moderados.length * conversionRates.moderados),\n  recentes: Math.round(grupos.recentes.length * conversionRates.recentes)\n};\n\nconst totalConversions = expectedConversions.criticos + expectedConversions.moderados + expectedConversions.recentes;\nconst receitaMensal = totalConversions * avgMonthlyValue;\nconst investimento = 2000;\nconst roi = Math.round((receitaMensal / investimento - 1) * 100);\n\nreturn [\n  { json: { tipo: 'criticos', alunos: grupos.criticos, count: grupos.criticos.length } },\n  { json: { tipo: 'moderados', alunos: grupos.moderados, count: grupos.moderados.length } },\n  { json: { tipo: 'recentes', alunos: grupos.recentes, count: grupos.recentes.length } },\n  { json: { \n    tipo: 'resumo',\n    grupos: {\n      criticos: grupos.criticos.length,\n      moderados: grupos.moderados.length,\n      recentes: grupos.recentes.length,\n      outros: grupos.outros.length\n    },\n    conversoes: expectedConversions,\n    totalConversoes: totalConversions,\n    receitaMensal: receitaMensal,\n    investimento: investimento,\n    roi: roi,\n    status: 'pronto_para_campanha'\n  }}\n];"
      },
      "id": "segment-csv-data",
      "name": "🎯 Segmentar CSV",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [640, 300]
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{ $json.tipo }}",
        "rules": {
          "values": [
            {
              "conditions": {
                "string": [{ "value1": "={{ $json.tipo }}", "operation": "equal", "value2": "criticos" }]
              }
            },
            {
              "conditions": {
                "string": [{ "value1": "={{ $json.tipo }}", "operation": "equal", "value2": "moderados" }]
              }
            },
            {
              "conditions": {
                "string": [{ "value1": "={{ $json.tipo }}", "operation": "equal", "value2": "recentes" }]
              }
            },
            {
              "conditions": {
                "string": [{ "value1": "={{ $json.tipo }}", "operation": "equal", "value2": "resumo" }]
              }
            }
          ]
        }
      },
      "id": "router-grupos",
      "name": "🔀 Router Grupos",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [860, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:3001/api/campaign/send-batch",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            { "name": "Content-Type", "value": "application/json" },
            { "name": "Authorization", "value": "Bearer fullforce_academia_token_2024" }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ JSON.stringify({ grupo: $json.tipo, alunos: $json.alunos, config: { msgsPerDay: $json.alunos[0]?.msgsPerDay || 50, template: $json.alunos[0]?.template || 'default' } }) }}"
      },
      "id": "send-campaign",
      "name": "📱 Enviar Campanha",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1080, 200]
    },
    {
      "parameters": {
        "filePath": "/home/node/.n8n/logs/campaign-results.json",
        "jsonData": "={{ JSON.stringify($json, null, 2) }}"
      },
      "id": "save-results",
      "name": "💾 Salvar Resultados",
      "type": "n8n-nodes-base.writeFile",
      "typeVersion": 1,
      "position": [1080, 400]
    }
  ],
  "connections": {
    "🎯 Trigger Manual CSV": {
      "main": [[{ "node": "📂 Carregar CSV Local", "type": "main", "index": 0 }]]
    },
    "📂 Carregar CSV Local": {
      "main": [[{ "node": "🎯 Segmentar CSV", "type": "main", "index": 0 }]]
    },
    "🎯 Segmentar CSV": {
      "main": [[{ "node": "🔀 Router Grupos", "type": "main", "index": 0 }]]
    },
    "🔀 Router Grupos": {
      "main": [
        [{ "node": "📱 Enviar Campanha", "type": "main", "index": 0 }],
        [{ "node": "📱 Enviar Campanha", "type": "main", "index": 0 }],
        [{ "node": "📱 Enviar Campanha", "type": "main", "index": 0 }],
        [{ "node": "💾 Salvar Resultados", "type": "main", "index": 0 }]
      ]
    },
    "📱 Enviar Campanha": {
      "main": [[{ "node": "💾 Salvar Resultados", "type": "main", "index": 0 }]]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}