#!/usr/bin/env node

/**
 * FFGym Quick Start
 * Script de inicializa√ß√£o r√°pida para o sistema FFGym
 */

const FFGymSystemInitializer = require('./ffgym-system-initializer');

class FFGymQuickStart {
    constructor() {
        this.initializer = new FFGymSystemInitializer();
        this.config = {
            quickMode: true,
            skipOptionalChecks: true,
            autoConfigureMCPs: true,
            presetCampaigns: true
        };
    }

    /**
     * Executa inicializa√ß√£o r√°pida
     */
    async quickStart() {
        console.log('‚ö° FFGym Quick Start');
        console.log('üöÄ Inicializa√ß√£o r√°pida do sistema...\n');

        try {
            // 1. Verifica√ß√µes essenciais
            await this.essentialChecks();

            // 2. Inicializa√ß√£o m√≠nima
            await this.minimalInitialization();

            // 3. Configura√ß√£o autom√°tica
            await this.autoConfiguration();

            // 4. Campanha de demonstra√ß√£o
            await this.setupDemoCampaign();

            // 5. Interface de comando
            await this.launchCommandInterface();

        } catch (error) {
            console.error('‚ùå Erro na inicializa√ß√£o r√°pida:', error.message);
            await this.showTroubleshooting();
        }
    }

    /**
     * Verifica√ß√µes essenciais
     */
    async essentialChecks() {
        console.log('üîç Verifica√ß√µes essenciais...');

        // Verificar Node.js version
        const nodeVersion = process.version;
        if (parseInt(nodeVersion.slice(1)) < 16) {
            throw new Error(`Node.js 16+ necess√°rio. Vers√£o atual: ${nodeVersion}`);
        }
        console.log(`  ‚úÖ Node.js ${nodeVersion}`);

        // Verificar package.json
        try {
            require('./package.json');
            console.log('  ‚úÖ package.json encontrado');
        } catch (error) {
            throw new Error('package.json n√£o encontrado');
        }

        // Verificar vari√°veis de ambiente b√°sicas
        const requiredEnv = ['NODE_ENV'];
        const missing = requiredEnv.filter(env => !process.env[env]);

        if (missing.length === 0) {
            console.log('  ‚úÖ Vari√°veis de ambiente OK');
        } else {
            console.log('  ‚ö†Ô∏è  Algumas vari√°veis de ambiente ausentes (configura√ß√£o autom√°tica)');
            // Auto-configurar
            process.env.NODE_ENV = process.env.NODE_ENV || 'development';
            process.env.MOCK_MODE = 'true';
        }

        console.log('');
    }

    /**
     * Inicializa√ß√£o m√≠nima
     */
    async minimalInitialization() {
        console.log('‚ö° Inicializa√ß√£o m√≠nima...');

        try {
            // Criar diret√≥rios b√°sicos
            const fs = require('fs').promises;
            await fs.mkdir('./logs', { recursive: true });
            await fs.mkdir('./data', { recursive: true });
            await fs.mkdir('./reports', { recursive: true });
            console.log('  ‚úÖ Diret√≥rios criados');

            // Inicializar MCPs em modo m√≠nimo
            await this.initializeMCPsMinimal();

            // Inicializar agente master apenas
            await this.initializeMasterAgent();

            console.log('  ‚úÖ Sistema m√≠nimo inicializado\n');

        } catch (error) {
            console.error('  ‚ùå Erro na inicializa√ß√£o m√≠nima:', error.message);
            throw error;
        }
    }

    /**
     * Inicializa MCPs em modo m√≠nimo
     */
    async initializeMCPsMinimal() {
        console.log('  üì¶ Carregando MCPs...');

        try {
            // WhatsApp MCP (mock se WAHA n√£o dispon√≠vel)
            const WhatsAppMCP = require('./mcps/whatsapp/whatsapp-automation-mcp.js');
            this.whatsappMCP = new WhatsAppMCP({
                mockMode: true,
                wahaUrl: 'http://localhost:3000'
            });

            // Analytics MCP
            const AnalyticsMCP = require('./mcps/analytics/gym-analytics-mcp.js');
            this.analyticsMCP = new AnalyticsMCP({
                mockMode: true
            });

            console.log('    ‚úÖ MCPs carregados em modo mock');

        } catch (error) {
            console.log('    ‚ö†Ô∏è  Usando MCPs mock devido a erro:', error.message);
            this.whatsappMCP = { mockMode: true };
            this.analyticsMCP = { mockMode: true };
        }
    }

    /**
     * Inicializa agente master
     */
    async initializeMasterAgent() {
        console.log('  ü§ñ Inicializando Campaign Master...');

        try {
            const CampaignMasterAgent = require('./agents/main/campaign-master-agent.js');
            this.campaignMaster = new CampaignMasterAgent({
                quickMode: true,
                mcps: {
                    whatsapp: this.whatsappMCP,
                    analytics: this.analyticsMCP
                }
            });

            console.log('    ‚úÖ Campaign Master ativo');

        } catch (error) {
            console.log('    ‚ö†Ô∏è  Campaign Master em modo simplificado:', error.message);
            this.campaignMaster = {
                mockMode: true,
                executeSimpleCampaign: async (data) => {
                    return {
                        success: true,
                        message: 'Campanha simulada executada',
                        results: { sent: data.leads?.length || 0, conversions: 0 }
                    };
                }
            };
        }
    }

    /**
     * Configura√ß√£o autom√°tica
     */
    async autoConfiguration() {
        console.log('üîß Configura√ß√£o autom√°tica...');

        // Configurar dados de demonstra√ß√£o
        this.demoData = {
            leads: this.generateDemoLeads(),
            segments: this.generateDemoSegments(),
            messages: this.generateDemoMessages()
        };

        console.log(`  ‚úÖ ${this.demoData.leads.length} leads de demonstra√ß√£o gerados`);
        console.log(`  ‚úÖ ${Object.keys(this.demoData.segments).length} segmentos configurados`);
        console.log(`  ‚úÖ ${Object.keys(this.demoData.messages).length} templates de mensagem\n`);
    }

    /**
     * Gera leads de demonstra√ß√£o
     */
    generateDemoLeads() {
        const leads = [];
        const names = ['Jo√£o Silva', 'Maria Santos', 'Pedro Oliveira', 'Ana Costa', 'Carlos Ferreira'];
        const segments = ['hot', 'warm', 'cold', 'vip', 'champion'];

        for (let i = 0; i < 50; i++) {
            leads.push({
                id: `demo-${i + 1}`,
                name: names[i % names.length],
                phone: `+5565999${String(i).padStart(5, '0')}`,
                segment: segments[i % segments.length],
                lastActivity: this.randomDate(),
                joinDate: this.randomJoinDate(),
                lifetimeValue: Math.floor(Math.random() * 3000) + 500,
                inactiveDays: Math.floor(Math.random() * 200) + 30
            });
        }

        return leads;
    }

    /**
     * Gera segmentos de demonstra√ß√£o
     */
    generateDemoSegments() {
        return {
            vip: {
                count: 5,
                description: 'Membros VIP de alto valor',
                strategy: 'personal_approach',
                expectedConversion: 0.30
            },
            hot: {
                count: 15,
                description: 'Leads quentes (>90 dias inativos)',
                strategy: 'transformation_challenge',
                expectedConversion: 0.15
            },
            warm: {
                count: 20,
                description: 'Leads mornos (30-90 dias)',
                strategy: 'gentle_return',
                expectedConversion: 0.10
            },
            cold: {
                count: 8,
                description: 'Leads frios (<30 dias)',
                strategy: 'discount_offer',
                expectedConversion: 0.05
            },
            champion: {
                count: 2,
                description: 'Campe√µes/Referenciadores',
                strategy: 'referral_incentive',
                expectedConversion: 0.20
            }
        };
    }

    /**
     * Gera mensagens de demonstra√ß√£o
     */
    generateDemoMessages() {
        return {
            hot: 'Oi {NOME}, t√° por a√≠? ü§î\n\nMe responde uma coisa: voc√™ quer ser aquela pessoa que todo mundo vai perguntar "o que voc√™ fez?" em dezembro?\n\nEu tenho exatamente 90 dias pra te levar at√© l√°.\n\nüèãÔ∏è Academia Full Force - Matup√°',
            warm: 'Oi {NOME}! üëã\n\nNotamos que voc√™ n√£o tem aparecido na academia ultimamente. Tudo bem?\n\nQue tal voltarmos juntos? Preparamos uma oferta especial para voc√™:\n\nüí™ 2 semanas gratuitas de volta\n\nResponda: "QUERO VOLTAR"',
            cold: 'üèãÔ∏è Academia Full Force - Matup√°\n\nOl√° {NOME}! Sentimos sua falta! üí™\n\n35% de desconto na mensalidade\n‚úÖ 1 m√™s de personal incluso\n\nDe R$ 179,00 por apenas R$ 149,00/m√™s\n\nResponda: "QUERO MINHA VAGA"'
        };
    }

    /**
     * Configura campanha de demonstra√ß√£o
     */
    async setupDemoCampaign() {
        console.log('üé≠ Configurando campanha de demonstra√ß√£o...');

        this.demoCampaign = {
            id: 'demo-campaign-' + Date.now(),
            name: 'Campanha Demo FFGym',
            type: 'demonstration',
            leads: this.demoData.leads.slice(0, 10), // Apenas 10 leads para demo
            parameters: {
                dryRun: true,
                mockMode: true,
                segments: this.demoData.segments,
                messages: this.demoData.messages
            },
            estimatedResults: {
                totalLeads: 10,
                expectedConversions: 1,
                expectedRevenue: 447,
                estimatedDuration: '5 minutos'
            }
        };

        console.log('  ‚úÖ Campanha demo configurada');
        console.log(`  üìä ${this.demoCampaign.leads.length} leads selecionados`);
        console.log(`  üí∞ Receita esperada: R$ ${this.demoCampaign.estimatedResults.expectedRevenue}\n`);
    }

    /**
     * Lan√ßa interface de comando
     */
    async launchCommandInterface() {
        console.log('üéÆ Interface de Comando FFGym');
        console.log('=' .repeat(40));

        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        const showMenu = () => {
            console.log('\nüìã Op√ß√µes dispon√≠veis:');
            console.log('1. üöÄ Executar campanha demo');
            console.log('2. üìä Ver estat√≠sticas do sistema');
            console.log('3. üë• Ver leads de demonstra√ß√£o');
            console.log('4. üí¨ Testar mensagem personalizada');
            console.log('5. üìà Executar an√°lise de segmenta√ß√£o');
            console.log('6. üè• Health check do sistema');
            console.log('7. ‚ùì Ajuda e documenta√ß√£o');
            console.log('8. üõë Sair');
            console.log('\nDigite o n√∫mero da op√ß√£o:');
        };

        const handleCommand = async (input) => {
            const option = input.trim();

            switch (option) {
                case '1':
                    await this.executeDemoCampaign();
                    break;
                case '2':
                    await this.showSystemStats();
                    break;
                case '3':
                    await this.showDemoLeads();
                    break;
                case '4':
                    await this.testPersonalizedMessage(rl);
                    break;
                case '5':
                    await this.executeSegmentationAnalysis();
                    break;
                case '6':
                    await this.executeHealthCheck();
                    break;
                case '7':
                    await this.showHelp();
                    break;
                case '8':
                    console.log('\nüëã Encerrando FFGym Quick Start...');
                    rl.close();
                    return;
                default:
                    console.log('‚ùå Op√ß√£o inv√°lida. Tente novamente.');
            }

            setTimeout(showMenu, 1000);
        };

        showMenu();

        rl.on('line', handleCommand);

        rl.on('close', () => {
            console.log('\n‚úÖ FFGym Quick Start encerrado. At√© logo!');
            process.exit(0);
        });
    }

    /**
     * Executa campanha de demonstra√ß√£o
     */
    async executeDemoCampaign() {
        console.log('\nüöÄ Executando campanha de demonstra√ß√£o...');
        console.log('‚è≥ Simulando envio de mensagens...\n');

        try {
            // Simular processamento
            for (let i = 0; i < this.demoCampaign.leads.length; i++) {
                const lead = this.demoCampaign.leads[i];
                console.log(`üì± Enviando para ${lead.name} (${lead.segment})`);

                // Simular delay
                await this.sleep(500);

                // Simular resultado
                const success = Math.random() > 0.1; // 90% success rate
                const response = Math.random() > 0.7; // 30% response rate

                if (success) {
                    console.log(`  ‚úÖ Enviado com sucesso`);
                    if (response) {
                        console.log(`  üí¨ Resposta recebida!`);
                    }
                } else {
                    console.log(`  ‚ùå Falha no envio`);
                }
            }

            // Resultados da campanha
            const results = {
                sent: this.demoCampaign.leads.length,
                delivered: Math.floor(this.demoCampaign.leads.length * 0.9),
                responses: Math.floor(this.demoCampaign.leads.length * 0.3),
                conversions: Math.floor(this.demoCampaign.leads.length * 0.1),
                revenue: Math.floor(this.demoCampaign.leads.length * 0.1) * 447
            };

            console.log('\nüìä Resultados da Campanha Demo:');
            console.log(`   Mensagens enviadas: ${results.sent}`);
            console.log(`   Entregues: ${results.delivered} (${((results.delivered/results.sent)*100).toFixed(1)}%)`);
            console.log(`   Respostas: ${results.responses} (${((results.responses/results.delivered)*100).toFixed(1)}%)`);
            console.log(`   Convers√µes: ${results.conversions} (${((results.conversions/results.responses)*100).toFixed(1)}%)`);
            console.log(`   Receita gerada: R$ ${results.revenue}`);
            console.log(`   ROI: ${results.revenue > 0 ? (((results.revenue - (results.sent * 10)) / (results.sent * 10)) * 100).toFixed(0) : 0}%`);

        } catch (error) {
            console.error('‚ùå Erro na execu√ß√£o da campanha:', error.message);
        }
    }

    /**
     * Mostra estat√≠sticas do sistema
     */
    async showSystemStats() {
        console.log('\nüìä Estat√≠sticas do Sistema FFGym:');
        console.log('=' .repeat(35));

        console.log('üèóÔ∏è  Componentes:');
        console.log('   ‚Ä¢ MCPs: 2 ativos (WhatsApp, Analytics)');
        console.log('   ‚Ä¢ Agentes: 1 principal (Campaign Master)');
        console.log('   ‚Ä¢ Sub-agentes: 6 especialistas por segmento');

        console.log('\nüíæ Dados carregados:');
        console.log(`   ‚Ä¢ Leads de demo: ${this.demoData.leads.length}`);
        console.log(`   ‚Ä¢ Segmentos: ${Object.keys(this.demoData.segments).length}`);
        console.log(`   ‚Ä¢ Templates: ${Object.keys(this.demoData.messages).length}`);

        console.log('\n‚ö° Performance:');
        console.log('   ‚Ä¢ Modo: Demonstra√ß√£o/Mock');
        console.log('   ‚Ä¢ Rate limiting: 20 msg/min');
        console.log('   ‚Ä¢ Tempo de resposta: <100ms');
        console.log('   ‚Ä¢ Uptime: ' + Math.floor(process.uptime()) + 's');

        console.log('\nüéØ Capacidades:');
        console.log('   ‚Ä¢ Segmenta√ß√£o autom√°tica');
        console.log('   ‚Ä¢ Personaliza√ß√£o de mensagens');
        console.log('   ‚Ä¢ Analytics em tempo real');
        console.log('   ‚Ä¢ Otimiza√ß√£o de campanhas');
        console.log('   ‚Ä¢ Integra√ß√£o N8N');
    }

    /**
     * Mostra leads de demonstra√ß√£o
     */
    async showDemoLeads() {
        console.log('\nüë• Leads de Demonstra√ß√£o:');
        console.log('=' .repeat(30));

        const segments = {};
        this.demoData.leads.forEach(lead => {
            if (!segments[lead.segment]) segments[lead.segment] = [];
            segments[lead.segment].push(lead);
        });

        Object.entries(segments).forEach(([segment, leads]) => {
            console.log(`\nüéØ Segmento ${segment.toUpperCase()}:`);
            leads.slice(0, 3).forEach(lead => {
                console.log(`   ‚Ä¢ ${lead.name} - ${lead.inactiveDays} dias inativo - LTV: R$ ${lead.lifetimeValue}`);
            });
            if (leads.length > 3) {
                console.log(`   ... e mais ${leads.length - 3} leads`);
            }
        });

        console.log('\nüìà Distribui√ß√£o por Segmento:');
        Object.entries(this.demoData.segments).forEach(([segment, data]) => {
            const percentage = ((data.count / this.demoData.leads.length) * 100).toFixed(1);
            console.log(`   ${segment}: ${data.count} leads (${percentage}%) - Conv: ${(data.expectedConversion * 100).toFixed(0)}%`);
        });
    }

    /**
     * Testa mensagem personalizada
     */
    async testPersonalizedMessage(rl) {
        console.log('\nüí¨ Teste de Mensagem Personalizada');
        console.log('=' .repeat(35));

        const lead = this.demoData.leads[Math.floor(Math.random() * this.demoData.leads.length)];
        console.log(`\nüë§ Lead selecionado: ${lead.name}`);
        console.log(`üìä Segmento: ${lead.segment}`);
        console.log(`üìÖ Inativo h√°: ${lead.inactiveDays} dias`);

        console.log('\nüìù Mensagem personalizada:');
        console.log('-' .repeat(40));

        const template = this.demoData.messages[lead.segment] || this.demoData.messages.cold;
        const personalizedMessage = template.replace(/{NOME}/g, lead.name);

        console.log(personalizedMessage);
        console.log('-' .repeat(40));

        console.log('\n‚ú® Elementos de personaliza√ß√£o aplicados:');
        console.log('   ‚Ä¢ Nome do lead');
        console.log('   ‚Ä¢ Segmento espec√≠fico');
        console.log('   ‚Ä¢ Call-to-action otimizado');

        console.log('\nüìä Previs√£o de resposta:');
        const expectedResponse = this.demoData.segments[lead.segment]?.expectedConversion || 0.05;
        console.log(`   Probabilidade de convers√£o: ${(expectedResponse * 100).toFixed(0)}%`);
    }

    /**
     * Executa an√°lise de segmenta√ß√£o
     */
    async executeSegmentationAnalysis() {
        console.log('\nüìà An√°lise de Segmenta√ß√£o');
        console.log('=' .repeat(25));

        console.log('\n‚ö° Executando an√°lise...');

        // Simular processamento
        await this.sleep(1000);

        console.log('\nüéØ Resultados da Segmenta√ß√£o:');

        Object.entries(this.demoData.segments).forEach(([segment, data]) => {
            const leads = this.demoData.leads.filter(l => l.segment === segment);
            const avgLTV = leads.reduce((sum, l) => sum + l.lifetimeValue, 0) / leads.length;
            const avgInactive = leads.reduce((sum, l) => sum + l.inactiveDays, 0) / leads.length;

            console.log(`\nüîπ ${segment.toUpperCase()}:`);
            console.log(`   Leads: ${data.count}`);
            console.log(`   LTV m√©dio: R$ ${avgLTV.toFixed(0)}`);
            console.log(`   Inativo m√©dio: ${avgInactive.toFixed(0)} dias`);
            console.log(`   Conv. esperada: ${(data.expectedConversion * 100).toFixed(0)}%`);
            console.log(`   Estrat√©gia: ${data.strategy}`);
        });

        console.log('\nüí° Insights da Segmenta√ß√£o:');
        console.log('   ‚Ä¢ 30% dos leads s√£o de alta qualidade (VIP + Hot)');
        console.log('   ‚Ä¢ Segmento Warm tem maior volume (40%)');
        console.log('   ‚Ä¢ Champions t√™m potencial de refer√™ncia');
        console.log('   ‚Ä¢ ROI previsto: 3.750% se atingir metas');

        console.log('\nüéØ Recomenda√ß√µes:');
        console.log('   1. Priorizar VIPs com abordagem pessoal');
        console.log('   2. Campanha urg√™ncia para Hot leads');
        console.log('   3. Nurturing gradual para Warm');
        console.log('   4. Ofertas especiais para Champions');
    }

    /**
     * Executa health check
     */
    async executeHealthCheck() {
        console.log('\nüè• Health Check do Sistema');
        console.log('=' .repeat(25));

        console.log('\nüîç Verificando componentes...');

        const checks = [
            { name: 'Node.js', status: 'OK', details: process.version },
            { name: 'Sistema de arquivos', status: 'OK', details: 'Leitura/escrita funcionando' },
            { name: 'MCPs', status: 'OK', details: '2 MCPs carregados' },
            { name: 'Campaign Master', status: 'OK', details: 'Agente ativo' },
            { name: 'Dados demo', status: 'OK', details: `${this.demoData.leads.length} leads carregados` },
            { name: 'WAHA API', status: 'MOCK', details: 'Modo demonstra√ß√£o' },
            { name: 'N8N', status: 'MOCK', details: 'Modo demonstra√ß√£o' }
        ];

        checks.forEach(check => {
            const statusIcon = check.status === 'OK' ? '‚úÖ' :
                              check.status === 'MOCK' ? 'üé≠' : '‚ùå';
            console.log(`   ${statusIcon} ${check.name}: ${check.status} - ${check.details}`);
        });

        console.log('\nüìä Status Geral: üü¢ OPERACIONAL (Modo Demo)');
        console.log('\nüí° Sistema pronto para:');
        console.log('   ‚Ä¢ Campanhas de demonstra√ß√£o');
        console.log('   ‚Ä¢ Testes de segmenta√ß√£o');
        console.log('   ‚Ä¢ An√°lise de dados');
        console.log('   ‚Ä¢ Configura√ß√£o de produ√ß√£o');
    }

    /**
     * Mostra ajuda e documenta√ß√£o
     */
    async showHelp() {
        console.log('\n‚ùì Ajuda e Documenta√ß√£o FFGym');
        console.log('=' .repeat(35));

        console.log('\nüìö O que √© o FFGym?');
        console.log('   Sistema de automa√ß√£o para academias focado em reativa√ß√£o');
        console.log('   de membros inativos via WhatsApp com IA e analytics.');

        console.log('\nüéØ Principais Funcionalidades:');
        console.log('   ‚Ä¢ Segmenta√ß√£o inteligente de leads');
        console.log('   ‚Ä¢ Mensagens personalizadas automaticamente');
        console.log('   ‚Ä¢ An√°lise preditiva de convers√£o');
        console.log('   ‚Ä¢ Otimiza√ß√£o cont√≠nua de campanhas');
        console.log('   ‚Ä¢ Integra√ß√£o com N8N e Google Sheets');

        console.log('\nüöÄ Como usar em Produ√ß√£o:');
        console.log('   1. Configure WAHA: docker run -p 3000:3000 devlikeapro/waha');
        console.log('   2. Configure N8N: docker run -p 5678:5678 n8nio/n8n');
        console.log('   3. Configure .env com suas credenciais');
        console.log('   4. Importe seus leads reais');
        console.log('   5. Execute: npm run campaign:start');

        console.log('\nüìñ Documenta√ß√£o Completa:');
        console.log('   ‚Ä¢ README.md - Guia de instala√ß√£o');
        console.log('   ‚Ä¢ claude-ffgym.md - Configura√ß√£o de MCPs');
        console.log('   ‚Ä¢ /docs - Documenta√ß√£o t√©cnica');

        console.log('\nüÜò Suporte:');
        console.log('   ‚Ä¢ Email: suporte@fullforce.com');
        console.log('   ‚Ä¢ WhatsApp: (65) 99999-9999');
        console.log('   ‚Ä¢ GitHub: Issues e documenta√ß√£o');
    }

    // M√©todos auxiliares
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    randomDate() {
        const start = new Date(2024, 0, 1);
        const end = new Date();
        return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())).toISOString().split('T')[0];
    }

    randomJoinDate() {
        const start = new Date(2022, 0, 1);
        const end = new Date(2024, 0, 1);
        return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())).toISOString().split('T')[0];
    }

    async showTroubleshooting() {
        console.log('\nüîß Solu√ß√£o de Problemas:');
        console.log('=' .repeat(25));

        console.log('\n‚ùå Problemas Comuns:');
        console.log('   1. Erro de depend√™ncias: npm install');
        console.log('   2. WAHA n√£o conecta: docker run -p 3000:3000 devlikeapro/waha');
        console.log('   3. N8N n√£o acessa: docker run -p 5678:5678 n8nio/n8n');
        console.log('   4. Erro de permiss√£o: chmod +x *.js');

        console.log('\nüîç Verifica√ß√µes:');
        console.log('   ‚Ä¢ Node.js >= 16.0.0');
        console.log('   ‚Ä¢ NPM packages instalados');
        console.log('   ‚Ä¢ Portas 3000 e 5678 livres');
        console.log('   ‚Ä¢ Arquivo .env configurado');

        console.log('\nüÜò Para mais ajuda: node ffgym-quick-start.js --help');
    }
}

// Fun√ß√£o principal
async function main() {
    const quickStart = new FFGymQuickStart();

    try {
        await quickStart.quickStart();
    } catch (error) {
        console.error('\nüí• Erro fatal:', error.message);
        console.log('\nüîß Tente: node ffgym-quick-start.js --help');
        process.exit(1);
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    main().catch(console.error);
}

module.exports = FFGymQuickStart;